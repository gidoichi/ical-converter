// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mock_usecase/mock_repository.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	ics "github.com/arran4/golang-ical"
	usecase "github.com/gidoichi/ical-converter/usecase"
	gomock "go.uber.org/mock/gomock"
)

// MockDataSource is a mock of DataSource interface.
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource.
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance.
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// GetICal mocks base method.
func (m *MockDataSource) GetICal() (*ics.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetICal")
	ret0, _ := ret[0].(*ics.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetICal indicates an expected call of GetICal.
func (mr *MockDataSourceMockRecorder) GetICal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetICal", reflect.TypeOf((*MockDataSource)(nil).GetICal))
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetICal mocks base method.
func (m *MockRepository) GetICal(source usecase.DataSource) (*ics.Calendar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetICal", source)
	ret0, _ := ret[0].(*ics.Calendar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetICal indicates an expected call of GetICal.
func (mr *MockRepositoryMockRecorder) GetICal(source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetICal", reflect.TypeOf((*MockRepository)(nil).GetICal), source)
}
